{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "In this notebook, you will implement the forward longitudinal vehicle model. The model accepts throttle inputs and steps through the longitudinal dynamic equations. Once implemented, you will be given a set of inputs that drives over a small road slope to test your model.\n",
    "\n",
    "The input to the model is a throttle percentage $x_\\theta \\in [0,1]$ which provides torque to the engine and subsequently accelerates the vehicle for forward motion. \n",
    "\n",
    "The dynamic equations consist of many stages to convert throttle inputs to wheel speed (engine -> torque converter -> transmission -> wheel). These stages are bundled together in a single inertia term $J_e$ which is used in the following combined engine dynamic equations.\n",
    "\n",
    "\\begin{align}\n",
    "    J_e \\dot{\\omega}_e &= T_e - (GR)(r_{eff} F_{load}) \\\\ m\\ddot{x} &= F_x - F_{load}\n",
    "\\end{align}\n",
    "\n",
    "Where $T_e$ is the engine torque, $GR$ is the gear ratio, $r_{eff}$ is the effective radius, $m$ is the vehicle mass, $x$ is the vehicle position, $F_x$ is the tire force, and $F_{load}$ is the total load force. \n",
    "\n",
    "The engine torque is computed from the throttle input and the engine angular velocity $\\omega_e$ using a simplified quadratic model. \n",
    "\n",
    "\\begin{align}\n",
    "    T_e = x_{\\theta}(a_0 + a_1 \\omega_e + a_2 \\omega_e^2)\n",
    "\\end{align}\n",
    "\n",
    "The load forces consist of aerodynamic drag $F_{aero}$, rolling friction $R_x$, and gravitational force $F_g$ from an incline at angle $\\alpha$. The aerodynamic drag is a quadratic model and the friction is a linear model.\n",
    "\n",
    "\\begin{align}\n",
    "    F_{load} &= F_{aero} + R_x + F_g \\\\\n",
    "    F_{aero} &= \\frac{1}{2} C_a \\rho A \\dot{x}^2 = c_a \\dot{x}^2\\\\\n",
    "    R_x &= N(\\hat{c}_{r,0} + \\hat{c}_{r,1}|\\dot{x}| + \\hat{c}_{r,2}\\dot{x}^2) \\approx c_{r,1} \\dot{x}\\\\\n",
    "    F_g &= mg\\sin{\\alpha}\n",
    "\\end{align}\n",
    "\n",
    "Note that the absolute value is ignored for friction since the model is used for only forward motion ($\\dot{x} \\ge 0$). \n",
    " \n",
    "The tire force is computed using the engine speed and wheel slip equations.\n",
    "\n",
    "\\begin{align}\n",
    "    \\omega_w &= (GR)\\omega_e \\\\\n",
    "    s &= \\frac{\\omega_w r_e - \\dot{x}}{\\dot{x}}\\\\\n",
    "    F_x &= \\left\\{\\begin{array}{lr}\n",
    "        cs, &  |s| < 1\\\\\n",
    "        F_{max}, & \\text{otherwise}\n",
    "        \\end{array}\\right\\} \n",
    "\\end{align}\n",
    "\n",
    "Where $\\omega_w$ is the wheel angular velocity and $s$ is the slip ratio. \n",
    "\n",
    "We setup the longitudinal model inside a Python class below. The vehicle begins with an initial velocity of 5 m/s and engine speed of 100 rad/s. All the relevant parameters are defined and like the bicycle model, a sampling time of 10ms is used for numerical integration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "class Vehicle():\n",
    "    def __init__(self):\n",
    " \n",
    "        # ==================================\n",
    "        #  Parameters\n",
    "        # ==================================\n",
    "    \n",
    "        #Throttle to engine torque\n",
    "        self.a_0 = 400\n",
    "        self.a_1 = 0.1\n",
    "        self.a_2 = -0.0002\n",
    "        \n",
    "        # Gear ratio, effective radius, mass + inertia\n",
    "        self.GR = 0.35\n",
    "        self.r_e = 0.3\n",
    "        self.J_e = 10\n",
    "        self.m = 2000\n",
    "        self.g = 9.81\n",
    "        \n",
    "        # Aerodynamic and friction coefficients\n",
    "        self.c_a = 1.36\n",
    "        self.c_r1 = 0.01\n",
    "        \n",
    "        # Tire force \n",
    "        self.c = 10000\n",
    "        self.F_max = 10000\n",
    "        \n",
    "        # State variables\n",
    "        self.x = 0\n",
    "        self.v = 5\n",
    "        self.a = 0\n",
    "        self.w_e = 100\n",
    "        self.w_e_dot = 0\n",
    "        \n",
    "        self.sample_time = 0.01\n",
    "        \n",
    "    def reset(self):\n",
    "        # reset state variables\n",
    "        self.x = 0\n",
    "        self.v = 5\n",
    "        self.a = 0\n",
    "        self.w_e = 100\n",
    "        self.w_e_dot = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implement the combined engine dynamic equations along with the force equations in the cell below. The function $\\textit{step}$ takes the throttle $x_\\theta$ and incline angle $\\alpha$ as inputs and performs numerical integration over one timestep to update the state variables. Hint: Integrate to find the current position, velocity, and engine speed first, then propagate those values into the set of equations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Vehicle(Vehicle):\n",
    "    def step(self, throttle, alpha):\n",
    "        # ==================================\n",
    "        #  Implement vehicle model here\n",
    "        # ==================================                \n",
    "        F_aero = self.c_a * self.v * self.v\n",
    "        R_x = self.c_r1 * self.v\n",
    "        F_g = self.m * self.g * np.sin(alpha)\n",
    "        F_load = F_aero + R_x + F_g\n",
    "        T_e = throttle * (self.a_0 + (self.a_1 * self.w_e) + (self.a_2 * self.w_e * self.w_e))\n",
    "        W_w = self.GR * self.w_e\n",
    "        s = ((W_w * self.r_e) - self.v)/self.v\n",
    "        if (np.abs(s) < 1):\n",
    "            F_x = self.c * s\n",
    "        else:\n",
    "            F_x = self.F_max\n",
    "        self.x = self.x + (self.v * self.sample_time)\n",
    "        self.v = self.v + (self.a * self.sample_time)\n",
    "        self.a = (F_x - F_load)/self.m\n",
    "        self.w_e = self.w_e + (self.w_e_dot * self.sample_time)\n",
    "        self.w_e_dot = (T_e - (self.GR * self.r_e * F_load))/self.J_e\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the model, you can send constant throttle inputs to the vehicle in the cell below. You will observe that the velocity converges to a fixed value based on the throttle input due to the aerodynamic drag and tire force limit. A similar velocity profile can be seen by setting a negative incline angle $\\alpha$. In this case, gravity accelerates the vehicle to a terminal velocity where it is balanced by the drag force."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_time = 0.01\n",
    "time_end = 100\n",
    "model = Vehicle()\n",
    "\n",
    "t_data = np.arange(0,time_end,sample_time)\n",
    "v_data = np.zeros_like(t_data)\n",
    "\n",
    "# throttle percentage between 0 and 1\n",
    "throttle = 0.2\n",
    "\n",
    "# incline angle (in radians)\n",
    "alpha = 0\n",
    "\n",
    "for i in range(t_data.shape[0]):\n",
    "    v_data[i] = model.v\n",
    "    model.step(throttle, alpha)\n",
    "    \n",
    "plt.plot(t_data, v_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now drive the vehicle over a slope as shown in the diagram below.\n",
    "\n",
    "![ramp](ramp.png)\n",
    "\n",
    "To climb the slope, a trapezoidal throttle input is provided for the next 20 seconds as shown in the figure below. \n",
    "\n",
    "![throttle](throttle.png)\n",
    "\n",
    "The vehicle begins at 20% throttle and gradually increases to 50% throttle. This is maintained for 10 seconds as the vehicle climbs the steeper slope. Afterwards, the vehicle reduces the throttle to 0.\n",
    "\n",
    "In the cell below, implement the ramp angle profile $\\alpha (x)$ and throttle profile $x_\\theta (t)$ and step them through the vehicle dynamics. The vehicle position $x(t)$ is saved in the array $\\textit{x_data}$. This will be used to grade your solution.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_end = 20\n",
    "t_data = np.arange(0,time_end,sample_time)\n",
    "x_data = np.zeros_like(t_data)\n",
    "v_data = np.zeros_like(t_data)\n",
    "throttle_data = np.zeros_like(t_data)\n",
    "alpha_data = np.zeros_like(t_data)\n",
    "\n",
    "\n",
    "# reset the states\n",
    "model.reset()\n",
    "\n",
    "# ==================================\n",
    "#  Learner solution begins here\n",
    "# ==================================\n",
    "for i in range(t_data.shape[0]):\n",
    "    if i>= 0 and i<500:\n",
    "        throttle = 0.2 + (0.0006 * i)\n",
    "    elif i >= 500 and i < 1500:\n",
    "        throttle = 0.5\n",
    "    elif i >= 1500:\n",
    "        throttle = 2 - (0.001 * i)\n",
    "    if model.x < 60:\n",
    "        alpha = 0.0499\n",
    "    elif model.x >= 60 and model.x <= 150:\n",
    "        alpha = 0.0996\n",
    "    elif model.x > 150:\n",
    "        alpha = 0\n",
    "    alpha_data[i] = alpha\n",
    "    throttle_data[i] = throttle\n",
    "    x_data[i] = model.x\n",
    "    v_data[i] = model.v\n",
    "    model.step(throttle_data[i],alpha_data[i])\n",
    "    \n",
    "        \n",
    "        \n",
    "    \n",
    "        \n",
    "        \n",
    "    \n",
    "    \n",
    "\n",
    "# ==================================\n",
    "#  Learner solution ends here\n",
    "# ==================================\n",
    "\n",
    "# Plot x vs t for visualization\n",
    "plt.plot(t_data, x_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have implemented the vehicle model and inputs correctly, you should see that the vehicle crosses the ramp at ~15s where the throttle input begins to decrease.\n",
    "\n",
    "The cell below will save the time and vehicle inputs as text file named $\\textit{xdata.txt}$. To locate the file, change the end of your web directory to $\\textit{/notebooks/Course_1_Module_4/xdata.txt}$\n",
    "\n",
    "Once you are there, you can download the file and submit to the Coursera grader to complete this assessment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.vstack([t_data, x_data]).T\n",
    "np.savetxt('xdata.txt', data, delimiter=', ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations! You have now completed the assessment! Feel free to test the vehicle model with different inputs in the cell below, and see what trajectories they form. In the next module, you will see the longitudinal model being used for speed control. See you there!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_time = 0.01\n",
    "time_end = 30\n",
    "model.reset()\n",
    "\n",
    "t_data = np.arange(0,time_end,sample_time)\n",
    "x_data = np.zeros_like(t_data)\n",
    "\n",
    "# ==================================\n",
    "#  Test various inputs here\n",
    "# ==================================\n",
    "for i in range(t_data.shape[0]):\n",
    "\n",
    "    model.step(0,0)\n",
    "    \n",
    "plt.axis('equal')\n",
    "plt.plot(t_data, x_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
